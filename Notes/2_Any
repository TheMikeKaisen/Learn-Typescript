
# Any

When you don’t specify a type, and TypeScript can’t infer it from context, the compiler will typically default to `any`.

For ex:  \



```
let sum;
function add(){
	Return "five"
}
sum = add()
```


Here when you hover over the variable sum, you can see the data type as **any.**

<p id="gdcalert1" ><span style="color: red; font-weight: bold">>>>>>  gd2md-html alert: inline image link here (to images/image1.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href="#">Back to top</a>)(<a href="#gdcalert2">Next alert</a>)<br><span style="color: red; font-weight: bold">>>>>> </span></p>


![alt_text](images/image1.png "image_tooltip")


This is considered a bad practice. You usually want to avoid this, though, because `any` isn’t type-checked. Use the compiler flag <code>[noImplicitAny](https://www.typescriptlang.org/tsconfig#noImplicitAny)</code> in the typescript configuration file to flag any implicit <code>any</code> as an error.